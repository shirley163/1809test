<?php

// 短路求值
//
// 如果两个表达式中,第一个表达式已经可以决定整个表达式的结果,那么第二个表达式的程序就不会被执行
//
// 原因是为了提高代码的执行效率,减少占用系统资源

$int1 = 100;

$int2 = 100;

// 第一个表达式 $int1 > 100 结果为false
// 逻辑表达式为 && 逻辑与 并且的关系 有一个表达式为false,整个表达式的结果就是false
//
// 第二个表达式的结果并不会影响整个表达式的结果,因此第二个表达式不会被执行

var_dump($int1 > 100 && ++$int2 > 100);

// 第二个表达式没有被执行,++$int2没有被执行,$int2也就没有自增,输出结果仍然是100

echo $int2;

// 总结:
//
// && 逻辑与 第一个表达式为false,可以决定整个结果为false
// || 逻辑或 第一个表达式为true,可以决定整个结果为ture
//
// 一旦遇到短路求值情况,第二个表达式的内容是完全不执行的

echo '<hr>';

// $int1 = 100;
// $int2 = 100;

// 第一个表达式,先自增,++$int1是101 101 > 100 为true
// 第二个表达式,会执行 $int2++ 后自增, 100>100 结果为false
//
// 整个逻辑表达式的结果是false
//
// 最终两个自增都会执行,两个变量都会自增

// $bool = ++$int1 > 100 && $int2++ > 100;

// 1,$bool,是true 还是false
// 2,$int1 ?  $int2 ?

// var_dump($bool);

// echo $int1, ' ', $int2;

$int1 = 100;
$int2 = 100;

// 第一个表达式,$int2++后自增, 100>100 结果是false
// 以及可以决定整个逻辑表达式 && 的结果为false
// 第二个表达式不会执行 ++$int1 不会执行
//
// 只有$int2执行自增操作

$bool = $int2++ > 100 && ++$int1 > 100;

var_dump($bool);

echo $int1, ' ', $int2;

// 经典面试题
//
echo '<hr>';

$a = 10;
$b = 10;

if ($a = 10 || $b = 20) {
    $a++;
    $b++;
}

echo $a, ' ', $b;

// $a = 10 || $b = 20 是一个赋值表达式
//
// 将这个逻辑运算的结果赋值给$a
//
// $a = ( 10 || $b = 20 )
//
// 逻辑表达式是 10 || $b = 20
//
// 10转化为布尔值为true ,
//
// 第一个条件的结果为true,整个逻辑表达式是逻辑或
//
// 整个逻辑表达式的结果为true
//
// 并且引发短路求值,第二个表达式不会执行
//
// 10 || $b = 20 ---> true 整个表达式的结果为true
//
// $a 赋值为 true
//
// if ( $a = true)
//
// 执行大括号中的执行体
//
// $a++  true++  布尔值不执行自增操作  结果仍然是true
// $b++  10++ $b为11
//
// echo $a    echo true   echo 只能输出字符串类型  true转化为字符串为1 echo $a  为 1
//
// echo $b  是 11
