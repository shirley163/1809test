<?php

// 自增/自减  ++ --
//
// 语法格式
//
// 前缀    运算符写在变量之前 先自增
// ++$int
//
// 后缀    运算符写在变量之后 最后自增
// $int++
//
// 作用:每次执行,变量存储的原始数值,会增加1,或者减少1,多次执行,按照自行次数,改变数值
//
// 前缀形式,在当前行代码执行中,先执行自增或者自减操作,变量的数值都是按照执行之后的数值结果来参与代码的执行
//
// 后缀形式,先执行当前行的其他的操作,此时变量没有执行自增或者自减操作,只是以原始存储的数值参与程序的执行.在当前行或有的操作执行结束之后,再进行自增或者自减操作.变量存储的数值,在当前行之后的操作中才会有所变化

$int1 = 10;
$int2 = 10;

// 当前行先执行自增,$int1变为11,赋值给变量的数值为11
$num1 = ++$int1;

// 当前行,先执行赋值操作,此时$int2为10,没有进行自增操作
$num2 = $int2++;

echo $num1, ' ', $num2, '<br>';

// 此处为执行后缀自增操作之后的程序,此时$int2已经完成自增操作,数值变为11
echo $int1, ' ', $int2, '<br>';

$int3 = 5;

// 先比较判断,5==5 之后再执行自增
var_dump(5 == $int3++);

$int3 = 5;

// 先执行自增 之后再判断 5==6
var_dump(5 == ++$int3);

// 其他数据类型对于 ++ -- 的支持情况

// 字符串
//
// 字符串对于 ++ -- 的操作,支持效果不同,根据中文,英文,不同的字符编码,支持效果都有不同
//
// 实际项目中禁止使用字符串的自增自减操作

$str = '!';

echo --$str;

// 布尔类型 不支持自增自减操作

echo '<hr>';

$bool = false;

var_dump(++$bool);

// null
//
// 如果直接执行 -- 操作,不支持的
//
// 如果直接执行 ++ 操作,会转化数据类型为int整数类型,数值为执行次数对应的数值
//
// 数据类型变为int整数类型之后,就完全支持 ++ 和 -- 操作,按照整数类型的执行方式来执行效果

$null = null;

--$null;

var_dump($null);

++$null;

var_dump($null);

--$null;
--$null;
--$null;
--$null;
--$null;
var_dump($null);
